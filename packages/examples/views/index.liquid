<!DOCTYPE html>
<head>
  <meta charset="UTF-8" />

  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <title>karin example</title>

  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.5.0/semantic.min.css"
    integrity="sha512-KXol4x3sVoO+8ZsWPFI/r5KBVB/ssCGB5tsv2nVOKwLg33wTFP3fmnXa47FdSVIshVTgsYk/1734xSk9aFIa4A=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer" />

  <!-- https://www.srihash.org/: unpkg을 cdnjs 같은 형태로 만들떄 쓴거 -->
  <script
    src="https://unpkg.com/htmx.org@1.9.4"
    integrity="sha384-zUfuhFKKZCbHTY6aRR46gxiqszMk5tcHjsVFxnUo8VMus4kHGVdIYVbOYYNlKmHV"
    crossorigin="anonymous"></script>
  <script
    src="https://unpkg.com/hyperscript.org@0.9.11"
    integrity="sha384-SWTvl6gg9wW7CzNqGD9/s3vxwaaKN2g8/eYyu0yT+rkQ/Rb/6NmjnbTi9lYNrpZ1"
    crossorigin="anonymous"></script>

</head>
<body>
  <section class="ui text container">
    <h1>
      <a href="https://github.com/if1live/karin">karin</a>
    </h1>
    <img class="ui image" src="https://raw.githubusercontent.com/if1live/karin/main/documents/images/icon.png" />

    <h2>websocket example</h2>

    <dl>
      <dt>url</dt>
      <dd>{{ websocketUrl }}</dd>
    </dl>

    <h2>actions</h2>
    <div class="ui buttons mini">
      <button class="ui button" id="button-connect">
        connect
      </button>
      <div class="or"></div>
      <button class="ui button" id="button-disconnect">
        disconnect
      </button>
    </div>

    <form class="ui form">
      <div class="field">
        <label>message</label>
        <input
          type="text"
          id="textarea-unicast"
          value="kakudate karin" />

        <p>
          <div class="ui mini buttons">
            <button
              class="ui button"
              type="button"
              _="on click set #textarea-unicast.value to my.innerText">hello</button>
            <div class="or"></div>
            <button
              class="ui button"
              type="button"
              _="on click set #textarea-unicast.value to my.innerText">world</button>
            <div class="or"></div>
            <button
              class="ui button"
              type="button"
              _="on click set #textarea-unicast.value to 'kakudate karin'">karin</button>
          </div>
        </p>
      </div>

      <div class="field">
        <label>delay seconds</label>
        <input
          type="number"
          id="input-delay"
          min="0"
          max="900"
          value="5" />

        <p>
          <div class="ui mini buttons">
            <button
              class="ui button"
              type="button"
              _="on click set #input-delay.value to 0">0s</button>
            <div class="or"></div>
            <button
              class="ui button"
              type="button"
              _="on click set #input-delay.value to 5">5s</button>
            <div class="or"></div>
            <button
              class="ui button"
              type="button"
              _="on click set #input-delay.value to 10">10s</button>
          </div>
        </p>
      </div>
    </form>

    <p>
      <h3>simple</h3>
      <div class="ui mini buttons">
        <button
          class="ui button"
          id="button-unicast"
          type="button">
          unicast
        </button>
      </div>
    </p>

    <p>
      <h3>SQS: SendMessage</h3>
      <div class="ui mini buttons">
        <button
          class="ui button"
          id="button-karin-send-message"
          type="button">
          karin
        </button>
        <div class="or"></div>
        <button
          class="ui button"
          id="button-elasticmq-send-message"
          type="button">
          elasticmq
        </button>
      </div>
    </p>

    <p>
      <h3>SQS: SendMessageBatch</h3>
      <div class="ui mini buttons">
        <button
          class="ui button"
          id="button-karin-send-message-batch"
          type="button">
          karin
        </button>
        <div class="or"></div>
        <button
          class="ui button"
          id="button-elasticmq-send-message-batch"
          type="button">
          elasticmq
        </button>
      </div>
    </p>

    <h2>messages</h2>
    <ol id="messages">
      <li>initial</li>
    </ol>

    <p style="height: 20em;"></p>
  </section>

  <script>
    const websocketUrl = "{{ websocketUrl }}";

    /** @type {WebSocket} */
    let ws = null;

    function appendMessage(eventType, line) {
      const now = new Date();
      const ts = now.toISOString();

      const elem = document.createElement('li');
      elem.innerText = `${ts} [${eventType}] ${line}`;

      const container = document.querySelector('#messages');
      container.append(elem);
    }

    function flushMessage() {
      const container = document.querySelector('#messages');
      container.innerHTML = "";
    }

    document.querySelector('#button-connect').addEventListener('click', function(evt) {
      if (ws) {
        return;
      }

      flushMessage();

      const url = `${websocketUrl}?token=hello`;
      ws = new WebSocket(url);
      ws.binaryType = 'arraybuffer';

      ws.onmessage = async function(evt) {
        const data = evt.data;
        if (typeof data === 'string') {
          appendMessage('recv: text', data);
        } else {
          const message = new TextDecoder().decode(data);
          appendMessage('recv: binary', message);
        }
      };

      ws.onerror = function(evt) {
        console.log('onerror', evt);
        appendMessage('error', JSON.stringify(evt));
      };

      ws.onopen = function(evt) {
        appendMessage('open', '');
      };

      ws.onclose = function(evt) {
        const {code, reason, wasClean} = evt;
        const line = `code=${code} / reason=${reason} / wasClean=${wasClean}`;
        appendMessage('close', line);
      };
    });

    document.querySelector('#button-disconnect').addEventListener('click', function(evt) {
      if (! ws) {
        return;
      }

      ws.close();
      ws = null;
    });

    document.querySelector('#button-unicast').addEventListener('click', function(evt) {
      if (! ws) {
        return;
      }

      const container = document.querySelector('#textarea-unicast');
      const text = container.value;

      ws.send(text);
      appendMessage('send', text);
    });

    document.querySelector('#button-karin-send-message').addEventListener('click', async (evt) => {
      handleSendMessage('karin');
    });

    document.querySelector('#button-elasticmq-send-message').addEventListener('click', async (evt) => {
      handleSendMessage('elasticmq');
    });

    document.querySelector('#button-karin-send-message-batch').addEventListener('click', async (evt) => {
      handleSendMessageBatch('karin');
    });

    document.querySelector('#button-elasticmq-send-message-batch').addEventListener('click', async (evt) => {
      handleSendMessageBatch('elasticmq');
    });

    async function handleSendMessage(target) {
      if (! ws) {
        return;
      }

      const message = document.querySelector('#textarea-unicast').value || '<BLANK>'
      const delay = document.querySelector('#input-delay').valueAsNumber;

      try {
        const url = `/${target}/send?message=${message}&delay=${delay}`;
        const resp = await fetch(url, {
          method: 'POST',
        });
        appendMessage(`sqs:${target}`, `send: ${message}, delay=${delay}`);
      } catch(e) {
        appendMessage(`sqs:${target}`, `send: failed`);
      }
    }

    async function handleSendMessageBatch(target) {
      if (! ws) {
        return;
      }

      const message = document.querySelector('#textarea-unicast').value || '<BLANK>'
      const delay = document.querySelector('#input-delay').valueAsNumber;

      try {
        const url = `/${target}/send-batch?message=${message}&delay=${delay}`;
        const resp = await fetch(url, {
          method: 'POST',
        });
        appendMessage(`sqs:${target}`, `send-batch: ${message}, delay=${delay}`);
      } catch(e) {
        appendMessage(`sqs:${target}`, `send-batch: failed`);
      }
    }
  </script>
</body>